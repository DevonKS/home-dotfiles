(ns clojure-coding-interview.linked-lists)

(defn remove-node
  [ll node-pt previous-pt]
  (let [next-pt (get-in ll [:nodes node-pt :next])]
    (-> (if (nil? previous-pt)
          (assoc ll :head next-pt)
          (assoc-in ll [:nodes previous-pt :next] next-pt))
        (update :nodes #(dissoc % node-pt)))))

(defn ll->str
  [ll]
  (loop [current-node-pt (:head ll)
         ll-str ""]
    (let [current-val (get-in ll [:nodes current-node-pt :val])
          next-pt (get-in ll [:nodes current-node-pt :next])
          ll-str (str ll-str current-val " -> ")]
      (if (nil? next-pt)
        ll-str
        (recur next-pt ll-str)))))

(defn remove-dups
  [ll]
  (loop [current-node-pt (:head ll)
         previous-node-pt nil
         ll ll
         values-seen #{}]
    (if (nil? current-node-pt)
      ll
      (let [current-node (get-in ll [:nodes current-node-pt])
            current-val (:val current-node)
            is-dup? (contains? values-seen current-val)
            next-pt (:next current-node)
            new-ll (if is-dup?
                     (remove-node ll current-node-pt previous-node-pt)
                     ll)
            previous-pt (if is-dup?
                          previous-node-pt
                          current-node-pt)]
        (recur next-pt
               previous-pt
               new-ll
               (conj values-seen current-val))))))

(defn nth-last
  [ll nth]
  (loop [current-node-pt (:head ll)
         nth-item-pt current-node-pt
         len 0]
    (if (nil? current-node-pt)
      (if (> len nth) (get-in ll [:nodes nth-item-pt :val]) nil)
      (let [new-nth-item (if (> len nth)
                           (get-in ll [:nodes nth-item-pt :next])
                           nth-item-pt)]
        (recur (get-in ll [:nodes current-node-pt :next])
               new-nth-item
               (inc len))))))

(defn delete
  [ll val]
  (loop [current-node-pt (:head ll)
         previous-node-pt nil
         ll ll]
    (if (nil? current-node-pt)
      ll
      (let [current-node (get-in ll [:nodes current-node-pt])
            current-val (:val current-node)
            next-pt (:next current-node)
            delete-node? (= val current-val)
            new-ll (if delete-node?
                     (remove-node ll current-node-pt previous-node-pt)
                     ll)
            previous-pt (if delete-node?
                          previous-node-pt
                          current-node-pt)]
        (recur next-pt
               previous-pt
               new-ll)))))

(defn- partition-ll
  [ll previous-start-pt start-pt end-pt]
  (if (= start-pt end-pt)
    {:ll  ll
     :previous-pivot-pt previous-start-pt
     :end-pt end-pt}
    (loop [previous-node-pt start-pt
           current-node-pt (get-in ll [:nodes start-pt :next])
           previous-pivot-pt previous-start-pt
           pivot-val (get-in ll [:nodes start-pt :val])
           ll ll]
      (let [current-val (get-in ll [:nodes current-node-pt :val])
            next-pt (get-in ll [:nodes current-node-pt :next])
            is-smaller? (< current-val pivot-val)
            ll (if is-smaller?
                 (if (nil? previous-pivot-pt)
                   (let [current-head (:head ll)
                         current-node-next (get-in ll [:nodes current-node-pt :next])]
                     (->  ll
                          (assoc-in [:nodes current-node-pt :next] current-head)
                          (assoc-in [:nodes previous-node-pt :next] current-node-next)
                          (assoc :head current-node-pt)))
                   (let [current-node-next (get-in ll [:nodes current-node-pt :next])]
                     (-> ll
                         (assoc-in [:nodes previous-pivot-pt :next] current-node-pt)
                         (assoc-in [:nodes current-node-pt :next] start-pt)
                         (assoc-in [:nodes previous-node-pt :next] current-node-next))))
                 ll)
            previous-node-pt (if is-smaller?
                               previous-node-pt
                               current-node-pt)
            previous-pivot-pt (if is-smaller?
                                current-node-pt
                                previous-pivot-pt)]
        (if (or  (= current-node-pt end-pt)
                 (nil? next-pt))
          {:ll  ll
           :previous-pivot-pt previous-pivot-pt
           :end-pt previous-node-pt}
          (recur previous-node-pt
                 next-pt
                 previous-pivot-pt
                 pivot-val
                 ll))))))

(defn- inplace-quicksort*
  [ll previous-start-pt start-pt end-pt]
  (let [pivot-pt start-pt
        {partitioned-ll :ll
         previous-pivot-pt :previous-pivot-pt
         new-end-pt :end-pt}  (partition-ll ll previous-start-pt start-pt end-pt)
        new-start-pt (or  (get-in partitioned-ll [:nodes previous-start-pt :next])
                          (:head partitioned-ll))
        pivot-next-pt (get-in partitioned-ll [:nodes pivot-pt :next])]
    (cond-> partitioned-ll
      (not=  previous-pivot-pt previous-start-pt)
      (inplace-quicksort* previous-start-pt new-start-pt previous-pivot-pt)

      (and  (not= pivot-pt new-end-pt)
            (not= pivot-next-pt new-end-pt))
      (inplace-quicksort* pivot-pt pivot-next-pt new-end-pt))))

(defn inplace-quicksort
  [ll]
  (inplace-quicksort* ll nil (:head ll) nil))


(defn inplace-mergesort
  [ll])
